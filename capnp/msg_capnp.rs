// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: msg.capnp

pub mod msg {
  pub use self::Which::{Ack, Syn};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl<'a> ::capnp::traits::Owned<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
    type Reader = Reader<'a>;
    type Builder = Builder<'a>;
  }
  impl ::capnp::traits::Pipelined for Owned {
    type Pipeline = Pipeline;
  }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> {
    reader: ::capnp::private::layout::StructReader<'a>,
  }

  impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader }
    }
  }

  impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(
      reader: &::capnp::private::layout::PointerReader<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Reader<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(
        reader.get_struct(default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self
        .reader
        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl<'a> Reader<'a> {
    pub fn reborrow(&self) -> Reader<'_> {
      Reader { ..*self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(2) {
        0 => ::core::result::Result::Ok(Syn(::capnp::traits::FromStructReader::new(self.reader))),
        1 => ::core::result::Result::Ok(Ack(::capnp::traits::FromStructReader::new(self.reader))),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Builder<'a> {
    builder: ::capnp::private::layout::StructBuilder<'a>,
  }
  impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize {
      _private::STRUCT_SIZE
    }
  }
  impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id() -> u64 {
      _private::TYPE_ID
    }
  }
  impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder }
    }
  }

  impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self
        .builder
        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      _size: u32,
    ) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(
      builder: ::capnp::private::layout::PointerBuilder<'a>,
      default: ::core::option::Option<&'a [capnp::Word]>,
    ) -> ::capnp::Result<Builder<'a>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
        builder.get_struct(_private::STRUCT_SIZE, default)?,
      ))
    }
  }

  impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
    fn set_pointer_builder<'b>(
      pointer: ::capnp::private::layout::PointerBuilder<'b>,
      value: Reader<'a>,
      canonicalize: bool,
    ) -> ::capnp::Result<()> {
      pointer.set_struct(&value.reader, canonicalize)
    }
  }

  impl<'a> Builder<'a> {
    pub fn into_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_> {
      Builder { ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn init_syn(self) -> crate::msg_capnp::msg::syn::Builder<'a> {
      self.builder.set_data_field::<u16>(2, 0);
      self.builder.set_data_field::<u32>(0, 0u32);
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_ack(self) -> crate::msg_capnp::msg::ack::Builder<'a> {
      self.builder.set_data_field::<u16>(2, 1);
      self.builder.get_pointer_field(0).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(2) {
        0 => ::core::result::Result::Ok(Syn(::capnp::traits::FromStructBuilder::new(self.builder))),
        1 => ::core::result::Result::Ok(Ack(::capnp::traits::FromStructBuilder::new(self.builder))),
        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
      }
    }
  }

  pub struct Pipeline {
    _typeless: ::capnp::any_pointer::Pipeline,
  }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline {
        _typeless: typeless,
      }
    }
  }
  impl Pipeline {}
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize {
      data: 1,
      pointers: 1,
    };
    pub const TYPE_ID: u64 = 0xd190_35ca_53f5_2c94;
  }
  pub enum Which<A0, A1> {
    Syn(A0),
    Ack(A1),
  }
  pub type WhichReader<'a> =
    Which<crate::msg_capnp::msg::syn::Reader<'a>, crate::msg_capnp::msg::ack::Reader<'a>>;
  pub type WhichBuilder<'a> =
    Which<crate::msg_capnp::msg::syn::Builder<'a>, crate::msg_capnp::msg::ack::Builder<'a>>;

  pub mod syn {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(
          reader.get_struct(default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_id(self) -> u32 {
        self.reader.get_data_field::<u32>(0)
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        _size: u32,
      ) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_id(self) -> u32 {
        self.builder.get_data_field::<u32>(0)
      }
      #[inline]
      pub fn set_id(&mut self, value: u32) {
        self.builder.set_data_field::<u32>(0, value);
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline {
          _typeless: typeless,
        }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize {
        data: 1,
        pointers: 1,
      };
      pub const TYPE_ID: u64 = 0xddb9_2b2e_f896_14c9;
    }
  }

  pub mod ack {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl<'a> ::capnp::traits::Owned<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl<'a> ::capnp::traits::OwnedStruct<'a> for Owned {
      type Reader = Reader<'a>;
      type Builder = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
      type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
      reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
        Reader { reader }
      }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
      fn get_from_pointer(
        reader: &::capnp::private::layout::PointerReader<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Reader<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(
          reader.get_struct(default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self
          .reader
          .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl<'a> Reader<'a> {
      pub fn reborrow(&self) -> Reader<'_> {
        Reader { ..*self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_pk(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(
          &self.reader.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      pub fn has_pk(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
    }

    pub struct Builder<'a> {
      builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize {
        _private::STRUCT_SIZE
      }
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
      #[inline]
      fn type_id() -> u64 {
        _private::TYPE_ID
      }
    }
    impl<'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
        Builder { builder }
      }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self
          .builder
          .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
      fn init_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        _size: u32,
      ) -> Builder<'a> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(
        builder: ::capnp::private::layout::PointerBuilder<'a>,
        default: ::core::option::Option<&'a [capnp::Word]>,
      ) -> ::capnp::Result<Builder<'a>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(
          builder.get_struct(_private::STRUCT_SIZE, default)?,
        ))
      }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
      fn set_pointer_builder<'b>(
        pointer: ::capnp::private::layout::PointerBuilder<'b>,
        value: Reader<'a>,
        canonicalize: bool,
      ) -> ::capnp::Result<()> {
        pointer.set_struct(&value.reader, canonicalize)
      }
    }

    impl<'a> Builder<'a> {
      pub fn into_reader(self) -> Reader<'a> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_> {
        Builder { ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_pk(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(
          self.builder.get_pointer_field(0),
          ::core::option::Option::None,
        )
      }
      #[inline]
      pub fn set_pk(&mut self, value: ::capnp::data::Reader<'_>) {
        self.builder.get_pointer_field(0).set_data(value);
      }
      #[inline]
      pub fn init_pk(self, size: u32) -> ::capnp::data::Builder<'a> {
        self.builder.get_pointer_field(0).init_data(size)
      }
      pub fn has_pk(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
    }

    pub struct Pipeline {
      _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline {
          _typeless: typeless,
        }
      }
    }
    impl Pipeline {}
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize {
        data: 1,
        pointers: 1,
      };
      pub const TYPE_ID: u64 = 0x9a67_7d39_febf_a7f2;
    }
  }
}
